---
title: "Regression <br> Chapter 5.0 - 5.1"
institute: "Department of Statistics and Data Science <br> STAT 202"
logo: nu_logo.png
format: 
  revealjs:
    theme: [default, nu_theme.scss]
    chalkboard:
      theme: whiteboard
      toggleNotesButton: false
    menu:
        side: right
    code-line-numbers: false
    scrollable: true
execute:
  message: false
  warning: false
  echo: true
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(ggplot2)
library(dplyr)
library(shiny)
library(palmerpenguins)

penguin_sub <- penguins %>% 
  filter(sex == "male", species == "Chinstrap", island == "Dream") %>% 
  mutate(id = seq(1:34))
```

## Today's goals {.smaller background-image="images_horst/tidydata_5.png" background-size="400px" background-opacity="70%" background-position="50% 75%"}

<br/>

::: columns
::: {.column width="80%"}
1.  Find the correlation between two variables
2.  Build and interpret a linear regression model
3.  Make predictions using a linear regression model
4.  Plot the line of best fit on a scatterplot
:::
:::

::: {.absolute top="80%" left="50%" width="500"}
::: {style="opacity:0.75; font-size: 0.5em"}
Artwork by @allison_horst
:::
:::

## A Note about Regression

<br>

Remember that, BEFORE building a model, you should conduct an **exploratory data analysis**.

<br>

. . .

You will almost certainly need to do some data wrangling and visualizations before the model analysis.

<br>

. . .

For this lessons example we will be using a subset of the `penguins` dataset that only includes `male` penguins from the `Chinstrap` species and `Dream` island. This is stored in `penguin_sub`.

## Correlation Coefficient (Ex1)

::: {.absolute top="0%" left="90%" width="100"}
![](images_lecture/participate_icon.png)
:::

<font size="6"> **Correlation coefficient**: a number between -1 and 1 indicating the strength of the linear relationship between two numerical variables.

Match the following graphs with the most appropriate correlation coefficient: </font>

::: fragment
1.      a) -0.2     b) 0     c) 0.4     d) 0.7

![](images_lecture/cor_0.4.png){height="3in"}
:::

## Correlation Coefficient (Ex2)

::: {.absolute top="0%" left="90%" width="100"}
![](images_lecture/participate_icon.png)
:::

<font size="6"> Match the following graph with the most appropriate correlation coefficient: </font>

2.      a) -1     b) -0.75     c) -0.9     d) 1

![](images_lecture/cor_-1.png){height="3in"}

## Correlation Coefficient (Ex3)

::: {.absolute top="0%" left="90%" width="100"}
![](images_lecture/participate_icon.png)
:::

<font size="6"> Match the following graph with the most appropriate correlation coefficient: </font>

3.  Distance traveled vs the amount of gas in the car.

    a . Exactly -1

    b . Between -1 and 0

    c . About 0

    d . Between 0 and 1

    e . Exactly 1

## Correlation Coefficient (continued) {.scrollable}

<font size="6"> The following code shows three different options for calculating the correlation between two variables within the `penguins` dataset. </font>

::: panel-tabset
## Correlation

```{r cor}
#| echo: true
#| eval: false
# Option 1
penguin_sub %>%
  select(flipper_length_mm, body_mass_g) %>% 
  cor()
# Option 2
penguin_sub %>%
    summarize(cor = cor(flipper_length_mm, body_mass_g) )
# Option 3
cor(penguins$flipper_length_mm, penguins$body_mass_g)
```

## Data: penguin_sub

```{r}
penguin_sub <- penguins %>% 
  filter(sex == "male", species == "Chinstrap", island == "Dream") %>% 
  mutate(id = seq(1:34))

glimpse(penguin_sub)
```
:::

::: fragment
<font size="6"> You will most likely need to filter out missing data beforehand OR set `use = "complete.obs"` inside the `cor()` function. This is the equivalent of when we set `na.rm = TRUE` in other summary functions. </font>
:::

## Simple Linear Regression (SLR)

-   **Definition**: Simple linear regression: models the relationship between a response (y) variable and one explanatory (x) variable.

. . .

-   Essentially, we are finding the **line of best fit** for a scatterplot between 'x' and 'y'.

## SLR (continued)

**Equation** of a regression line: $$\hat{y} = b_0 + b_1*x$$

<br>

::: incremental
-   $b_0$ : intercept; the **expected** value of $\hat{y}$ when $x = 0$

-   $b_1$ : slope; for every 1 unit increase in x, then $\hat{y}$ increases **on average** by $b_1$

-   **fitted values**: $\hat{y}$; the predicted value on the regression line

-   **residuals**: $y - \hat{y}$; error in prediction
:::

## Example 1: Model {auto-animate="true"}

Consider a subset of the `penguins` dataset that only includes `male` penguins from the `Chinstrap` species and `Dream` island. This is stored in `penguin_sub`.

. . .

::: panel-tabset
## Model

Predict a penguin's `body_mass_g` using `flipper_length_mm`.

```{r}
#| echo: true
#Build a model
model_penguin <- lm(body_mass_g ~ flipper_length_mm, data = penguin_sub)

```

## Data: penguin_sub

```{r}
penguin_sub <- penguins %>% 
  filter(sex == "male", species == "Chinstrap", island == "Dream")%>% 
  mutate(id = seq(1:34))

glimpse(penguin_sub)
```
:::

## Example 1: Model {.scrollable auto-animate="true"}

Consider a subset of the `penguins` dataset that only includes `male` penguins from the `Chinstrap` species and `Dream` island. This is stored in `penguin_sub`.

::: panel-tabset
## Model

Predict a penguin's `body_mass_g` using `flipper_length_mm`.

```{r}
#| echo: true
#Build a model

model_penguin <- lm(body_mass_g ~ flipper_length_mm, data = penguin_sub)

#Summarize the model
summary(model_penguin)

```

## Data: penguin_sub

```{r}
penguin_sub <- penguins %>% 
  filter(sex == "male", species == "Chinstrap", island == "Dream") %>% 
  mutate(id = seq(1:34))

glimpse(penguin_sub)
```
:::

## Example 1: Plot regression line

::: panel-tabset
## Plot

```{r}
#| echo: true
# Plot relationship of variables
ggplot(penguin_sub, aes(x = flipper_length_mm, y = body_mass_g))+
    geom_point()
```

## Model

```{r}
#| echo: true
summary(model_penguin)$coefficients
```
:::

## Example 1: Plot regression line {.scrollable}

::: panel-tabset
## Plot

```{r}
#| echo: true
#| code-line-numbers: "4"
# Add line of best fit
ggplot(penguin_sub, aes(x = flipper_length_mm, y = body_mass_g))+
    geom_point() +
  geom_smooth(method = "lm", se = FALSE)
```

## Model

```{r}
#| echo: true
summary(model_penguin)$coefficients
```
:::

## Example 1: Residuals {.scrollable}

::: panel-tabset
## Visualizing

<https://northwestern-university.shinyapps.io/lec08_regression/>

## Calculating

Predict a penguin's `body_mass_g` using `flipper_length_mm`.

```{r}
#| echo: true
penguin_sub <- penguin_sub %>% 
  mutate(fitted = fitted(model_penguin),
         residuals = residuals(model_penguin))

glimpse(penguin_sub)
```
:::

## Example 1: Predicting

::: {.absolute top="0%" left="90%" width="100"}
![](images_lecture/participate_icon.png)
:::

Recall the equation of the regression line is

$$\widehat{\hbox{body_mass_g} } = -4111.3 + 40.3*\hbox{flipper_length}$$

<br>

You find a new `male` penguin from the `Chinstrap` species and `Dream` island that has a flipper length of 220 mm. What do you predict his weight to be in grams?

::: fragment
```{r}
#| echo: fenced
-4111.3 + 40.3*220
```
:::
